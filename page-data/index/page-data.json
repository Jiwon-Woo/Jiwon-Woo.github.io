{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-homepage-query-tsx","path":"/","result":{"data":{"allPost":{"nodes":[{"slug":"/nest-js-의존성-주입","title":"NestJS - 의존성 주입","date":"02.03.2024","excerpt":"들어가며 나도 그랬지만, express만 다뤄보던 사람은 NestJS 등장하는 의존성 주입이나 제어의 역전과 같은 개념이 생소하게 느껴질 수 있다. 이들은 NestJS만의 고유한 개념은 아니고, 스프링과 같이 OOP를 추구하는 곳에서 볼 수 있는…","timeToRead":6,"description":null,"tags":[{"name":"NestJS","slug":"nest-js"},{"name":"DI","slug":"di"},{"name":"IoC","slug":"io-c"}]},{"slug":"/nest-js-비즈니스-로직-에러-핸들링","title":"NestJS - 비즈니스 로직 에러 핸들링","date":"25.02.2024","excerpt":"비즈니스 로직 에러의 응답 만약 API 스펙을 전부 맞췄지만 비즈니스 로직에서 에러가 발생한다면, 어떤 응답을 내려줘야할까요? 궁금증이 생겨 개발자들이 모인 SNS에 질문을 드렸더니 다양한 답변을 받을 수 있었습니다.\n\n- 케이스 바이 케이스. 맥락과…","timeToRead":5,"description":null,"tags":[{"name":"NestJS","slug":"nest-js"},{"name":"Exception","slug":"exception"}]},{"slug":"/nest-js-데코레이터","title":"NestJS - 데코레이터","date":"08.02.2024","excerpt":"데코레이터(@)? 데코레이터는 본래 TypeScript의 기능이며, 실험적으로 이용이 가능하다. 이 데코레이터를 NestJS는 적극적으로 활용하며, 데코레이터를 통해 횡단관심사를 분리한다. 데코레이터는 데코레이터의 이름 앞에 @ 를 붙여 선언하므로 @…","timeToRead":6,"description":null,"tags":[{"name":"NestJS","slug":"nest-js"},{"name":"TypeScript","slug":"type-script"},{"name":"Decorator","slug":"decorator"}]}]}},"pageContext":{"formatString":"DD.MM.YYYY"}},"staticQueryHashes":["2421966660","2744905544","3090400250"],"slicesMap":{}}