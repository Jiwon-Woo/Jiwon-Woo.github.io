"use strict";(self.webpackChunkminimal_blog=self.webpackChunkminimal_blog||[]).push([[434],{4765:function(e,t,n){n.d(t,{F:function(){return u},Z:function(){return g}});var r=n(7294),l=n(8733),a=n(795),o=n(8377),c=n(6799),i=n(8871);var m=e=>{let{post:t}=e;return null};const s=["16px","8px","4px"].map((e=>`rgba(0, 0, 0, 0.1) 0px ${e} ${e} 0px`));var p=e=>{let{data:{post:t},children:n}=e;return(0,l.tZ)(o.Z,null,(0,l.tZ)(a.X6,{as:"h1",variant:"styles.h1"},t.title),(0,l.tZ)("p",{sx:{color:"secondary",mt:3,a:{color:"secondary"},fontSize:[1,1,2]}},(0,l.tZ)("time",null,t.date),t.tags&&(0,l.tZ)(r.Fragment,null," — ",(0,l.tZ)(c.Z,{tags:t.tags})),t.timeToRead&&" — ",t.timeToRead&&(0,l.tZ)("span",null,t.timeToRead," min read")),(0,l.tZ)("section",{sx:{my:5,".gatsby-resp-image-wrapper":{my:[4,4,5],borderRadius:"4px",boxShadow:s.join(", "),".gatsby-resp-image-image":{borderRadius:"4px"}},variant:"layout.content"}},n),(0,l.tZ)(m,{post:t}))};const u=e=>{var t,n,r;let{data:{post:a}}=e;return(0,l.tZ)(i.Z,{title:a.title,description:a.description?a.description:a.excerpt,image:a.banner?null===(t=a.banner)||void 0===t||null===(n=t.childImageSharp)||void 0===n||null===(r=n.resize)||void 0===r?void 0:r.src:void 0,pathname:a.slug,canonicalUrl:a.canonicalUrl})};function g(e){let{...t}=e;return r.createElement(p,t)}},6799:function(e,t,n){var r=n(8733),l=n(7294),a=n(1883),o=n(3494),c=n(9706);t.Z=e=>{let{tags:t}=e;const{tagsPath:n,basePath:i}=(0,o.Z)();return(0,r.tZ)(l.Fragment,null,t.map(((e,t)=>(0,r.tZ)(l.Fragment,{key:e.slug},!!t&&", ",(0,r.tZ)(a.Link,{sx:e=>{var t;return{...null===(t=e.styles)||void 0===t?void 0:t.a}},to:(0,c.Z)(`/${i}/${n}/${e.slug}`)},e.name)))))}},8871:function(e,t,n){var r=n(7294),l=n(1883),a=n(4232);t.Z=e=>{let{title:t="",description:n="",pathname:o="",image:c="",children:i=null,canonicalUrl:m=""}=e;const s=(0,a.Z)(),{siteTitle:p,siteTitleAlt:u,siteUrl:g,siteDescription:d,siteImage:E,author:h,siteLanguage:v}=s,f={title:t?`${t} | ${p}`:u,description:n||d,url:`${g}${o||""}`,image:`${g}${c||E}`};return r.createElement(r.Fragment,null,r.createElement("html",{lang:v}),r.createElement("title",null,f.title),r.createElement("meta",{name:"description",content:f.description}),r.createElement("meta",{name:"image",content:f.image}),r.createElement("meta",{property:"og:title",content:f.title}),r.createElement("meta",{property:"og:url",content:f.url}),r.createElement("meta",{property:"og:description",content:f.description}),r.createElement("meta",{property:"og:image",content:f.image}),r.createElement("meta",{property:"og:type",content:"website"}),r.createElement("meta",{property:"og:image:alt",content:f.description}),r.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),r.createElement("meta",{name:"twitter:title",content:f.title}),r.createElement("meta",{name:"twitter:url",content:f.url}),r.createElement("meta",{name:"twitter:description",content:f.description}),r.createElement("meta",{name:"twitter:image",content:f.image}),r.createElement("meta",{name:"twitter:image:alt",content:f.description}),r.createElement("meta",{name:"twitter:creator",content:h}),r.createElement("meta",{name:"gatsby-theme",content:"@lekoarts/gatsby-theme-minimal-blog"}),r.createElement("link",{rel:"icon",type:"image/png",sizes:"32x32",href:(0,l.withPrefix)("/favicon-32x32.png")}),r.createElement("link",{rel:"icon",type:"image/png",sizes:"16x16",href:(0,l.withPrefix)("/favicon-16x16.png")}),r.createElement("link",{rel:"apple-touch-icon",sizes:"180x180",href:(0,l.withPrefix)("/apple-touch-icon.png")}),m?r.createElement("link",{rel:"canonical",href:m}):null,i)}},3119:function(e,t,n){n.r(t),n.d(t,{Head:function(){return c.F},default:function(){return i}});var r=n(7294),l=n(1151);function a(e){const t=Object.assign({h3:"h3",code:"code",p:"p",h4:"h4",pre:"pre",strong:"strong",blockquote:"blockquote",a:"a"},(0,l.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h3,null,"데코레이터(",r.createElement(t.code,null,"@"),")?"),"\n",r.createElement(t.p,null,"데코레이터는 본래 TypeScript의 기능이며, 실험적으로 이용이 가능하다.\n",r.createElement("br"),"이 데코레이터를 NestJS는 적극적으로 활용하며, 데코레이터를 통해 횡단관심사를 분리한다.\n",r.createElement("br"),"데코레이터는 데코레이터의 이름 앞에 ",r.createElement(t.code,null,"@")," 를 붙여 선언하므로 ",r.createElement(t.code,null,"@expressioin")," 과 같은 형태를 가진다."),"\n",r.createElement(t.h4,null,"app.controller.ts"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()  // decorator\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()  // decorator\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n")),"\n",r.createElement(t.h4,null,"app.service.ts"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"import { Injectable } from '@nestjs/common';\n\n@Injectable() // decorator\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n")),"\n",r.createElement(t.p,null,"데코레이터는 클래스, 메서드, 접근자, 프로퍼티, 매개변수 앞에 붙일 수 있고, 데코레이터는 적용된 요소(클래스, 메서드 등)와 함께 런타임에 실행된다. ",r.createElement(t.code,null,"@")," 뒤의 ",r.createElement(t.code,null,"expression")," 은 함수로, 데코레이터가 실행된다는 것은 데코레이터로 구현된 함수가 실행된다는 의미이다.\n데코레이터는 직접 만들어서 사용할수도 있지만 자주 사용되는 기능들은 이미 구현되어 있는 모듈이 있으므로 원하는 기능에 맞게 구현하거나 가져와 사용하면 된다."),"\n",r.createElement("br"),"\n",r.createElement(t.h3,null,"데코레이터의 구현"),"\n",r.createElement(t.p,null,"보통 이미 만들어져 있는 데코레이터를 가져다 쓰겠지만, 아래처럼 직접 선언하여 쓰는 것도 가능하다."),"\n",r.createElement(t.h4,null,"메서드 데코레이터 예제"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\nfunction deco(target: any, name: string, descriptor: PropertyDescriptor) {\n  console.log('target: ', target);\n  console.log('name: ', name);\n  console.log('descriptor: ', descriptor);\n}\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @deco\n  @Get()\n  getHello(): string {\n    console.log('Hello World!');\n    return this.appService.getHello();\n  }\n}\n")),"\n",r.createElement(t.h4,null,"실행결과"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"target:  {}\nname:  getHello\ndescriptor:  {\n  value: [Function: getHello],\n  writable: true,\n  enumerable: false,\n  configurable: true\n}\n\n[...]\n\nHello World!\n")),"\n",r.createElement(t.p,null,"메서드 데코레이터를 만들기 위해서는 ",r.createElement(t.code,null,"deco")," 함수처럼 ",r.createElement(t.code,null,"target"),", ",r.createElement(t.code,null,"name"),", ",r.createElement(t.code,null,"descriptor")," 세개의 인자를 받아야한다.\n",r.createElement("br"),"참고로 ",r.createElement(t.code,null,"target"),", ",r.createElement(t.code,null,"name"),", ",r.createElement(t.code,null,"descriptor"),"는 변수명일 뿐이므로, 다른 이름으로 써도 된다."),"\n",r.createElement("br"),"\n",r.createElement(t.h3,null,"데코레이터 팩토리"),"\n",r.createElement(t.p,null,"만약 데코레이터에 인자를 넘겨 데코레이터의 행동을 조절하고 싶다면 ",r.createElement(t.strong,null,"데코레이터를 리턴하는 함수"),", 즉 ",r.createElement(t.strong,null,"데코레이터 팩토리"),"를 만들면 된다."),"\n",r.createElement(t.h4,null,"인자가 있는 데코레이터 예제"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\nfunction deco(param: string) {\n  console.log('evaluate decorator');\n  return function (target: any, naem: string, descriptor: PropertyDescriptor) {\n    console.log(param);\n  };\n}\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @deco('deco')\n  @Get()\n  getHello(): string {\n    console.log('Hello World!');\n    return this.appService.getHello();\n  }\n}\n")),"\n",r.createElement(t.h4,null,"실행결과"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"evaluate decorator\ndeco\n\n[...]\n\nHello World!\n")),"\n",r.createElement("br"),"\n",r.createElement(t.h3,null,"데코레이터 합성"),"\n",r.createElement(t.p,null,"하나의 요소에 여러가지 데코레이터를 사용할 수도 있는데, 이를 데코레이터의 합성이라고 표현한다."),"\n",r.createElement(t.h4,null,"데코레이터 합성 예제"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\nfunction first() {\n  console.log('first(): factory evaluated');\n  return function (target: any, name: string, descriptor: PropertyDescriptor) {\n    console.log('first(): called');\n  };\n}\n\nfunction second() {\n  console.log('second(): factory evaluated');\n  return function (target: any, name: string, descriptor: PropertyDescriptor) {\n    console.log('second(): called');\n  };\n}\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @first()\n  @second()\n  @Get()\n  getHello(): string {\n    console.log('Hello World!');\n    return this.appService.getHello();\n  }\n}\n")),"\n",r.createElement(t.h4,null,"실행결과"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"first(): factory evaluated\nsecond(): factory evaluated\nsecond(): called\nfirst(): called\n\n[...]\n\nHello World!\n")),"\n",r.createElement(t.p,null,"실행결과를 보면 평가(evaluate)는 위에서 아래로 진행되지만, 호출(call)은 아래에서 위로 되는 것을 알 수 있다."),"\n",r.createElement("br"),"\n",r.createElement(t.h3,null,"데코레이터 평가(evaluate)?"),"\n",r.createElement(t.p,null,"데코레이터를 evaluate 한다는 표현을 쓰던데 데코레이터를 평가한다는게 정확히 무슨 의미인지 파악하기 어렵다...\n",r.createElement("br"),"다른 글의 설명을 봤을 땐 ",r.createElement(t.strong,null,"데코레이터가 실행되는 시점"),"을 데코레이터 ",r.createElement(t.strong,null,"평가"),"라고 하며, 데코레이터가 적용되는 대상이 정의되는 단계에서 데코레이터 함수 자체가 실행되는 시점을 의미하는 것 같다.\n",r.createElement("br"),"특히 이 부분이 헷갈리는 것은 ",r.createElement(t.strong,null,"데코레이터 호출"),"과 혼동되기 때문인데, ",r.createElement(t.strong,null,"데코레이터 호출"),"은 ",r.createElement(t.strong,null,"데코레이터가 적용된 대상이 실행되는 시점"),"에 일어난다고 한다."),"\n",r.createElement(t.p,null,"즉... '데코레이터 함수 자체'가 실행되냐, '데코레이터 함수가 적용된 대상'이 실행되냐의 차이인 것 같은데.. 아직도 두루뭉술하게 느껴진다.\n이 부분은 TypeScript나 NestJS에 대한 이해도를 좀 더 높이고 다시 봐야할 것 같다."),"\n",r.createElement("br"),"\n",r.createElement(t.h3,null,"출처"),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://wikidocs.net/158481"},"NestJS로 배우는 백엔드 프로그래밍 - 2.6 데코레이터"),"\n",r.createElement("br"),r.createElement(t.a,{href:"https://typescript-kr.github.io/pages/decorators.html"},"TypeScript Docs - 데코레이터"),"\n",r.createElement("br"),r.createElement(t.a,{href:"https://itchallenger.tistory.com/765"},"타입스크립트 데코레이터 완벽 가이드")),"\n"))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},c=n(4765);function i(e){return r.createElement(c.Z,e,r.createElement(o,e))}c.Z}}]);
//# sourceMappingURL=component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx-content-file-path-content-posts-nest-js-4-mdx-2a0875accc7f0b87b67b.js.map